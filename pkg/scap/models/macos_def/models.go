// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://oval.mitre.org/XMLSchema/oval-definitions-5#macos
package macos_def

import (
	"encoding/xml"
	"github.com/complianceascode/librescap/pkg/scap/models/oval"
	"github.com/complianceascode/librescap/pkg/scap/models/oval_def"
	"github.com/complianceascode/librescap/pkg/scap/models/xml_dsig"
)

// Element
type AccountinfoTest struct {
	XMLName xml.Name `xml:accountinfo_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type AccountinfoObject struct {
	XMLName xml.Name `xml:accountinfo_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type AccountinfoState struct {
	XMLName xml.Name `xml:accountinfo_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Username *oval_def.EntityStateStringType `xml:"username"`

	Password *oval_def.EntityStateStringType `xml:"password"`

	Uid *oval_def.EntityStateIntType `xml:"uid"`

	Gid *oval_def.EntityStateIntType `xml:"gid"`

	Realname *oval_def.EntityStateStringType `xml:"realname"`

	HomeDir *oval_def.EntityStateStringType `xml:"home_dir"`

	LoginShell *oval_def.EntityStateStringType `xml:"login_shell"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type AuthorizationdbTest struct {
	XMLName xml.Name `xml:authorizationdb_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type AuthorizationdbObject struct {
	XMLName xml.Name `xml:authorizationdb_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type AuthorizationdbState struct {
	XMLName xml.Name `xml:authorizationdb_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	RightName *oval_def.EntityStateStringType `xml:"right_name"`

	Xpath *oval_def.EntityStateStringType `xml:"xpath"`

	ValueOf *oval_def.EntityStateAnySimpleType `xml:"value_of"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type CorestorageTest struct {
	XMLName xml.Name `xml:corestorage_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type CorestorageObject struct {
	XMLName xml.Name `xml:corestorage_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type CorestorageState struct {
	XMLName xml.Name `xml:corestorage_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Uuid *oval_def.EntityStateStringType `xml:"uuid"`

	Xpath *oval_def.EntityStateStringType `xml:"xpath"`

	ValueOf *oval_def.EntityStateAnySimpleType `xml:"value_of"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type DiskutilTest struct {
	XMLName xml.Name `xml:diskutil_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type DiskutilObject struct {
	XMLName xml.Name `xml:diskutil_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type DiskutilState struct {
	XMLName xml.Name `xml:diskutil_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Device *oval_def.EntityStateStringType `xml:"device"`

	Filepath *oval_def.EntityStateStringType `xml:"filepath"`

	Uread *EntityStatePermissionCompareType `xml:"uread"`

	Uwrite *EntityStatePermissionCompareType `xml:"uwrite"`

	Uexec *EntityStatePermissionCompareType `xml:"uexec"`

	Gread *EntityStatePermissionCompareType `xml:"gread"`

	Gwrite *EntityStatePermissionCompareType `xml:"gwrite"`

	Gexec *EntityStatePermissionCompareType `xml:"gexec"`

	Oread *EntityStatePermissionCompareType `xml:"oread"`

	Owrite *EntityStatePermissionCompareType `xml:"owrite"`

	Oexec *EntityStatePermissionCompareType `xml:"oexec"`

	UserDiffers *oval_def.EntityStateBoolType `xml:"user_differs"`

	ActualUser *oval_def.EntityStateIntType `xml:"actual_user"`

	ExpectedUser *oval_def.EntityStateIntType `xml:"expected_user"`

	GroupDiffers *oval_def.EntityStateBoolType `xml:"group_differs"`

	ActualGroup *oval_def.EntityStateIntType `xml:"actual_group"`

	ExpectedGroup *oval_def.EntityStateIntType `xml:"expected_group"`

	SymlinkDiffers *oval_def.EntityStateBoolType `xml:"symlink_differs"`

	ActualSymlink *oval_def.EntityStateStringType `xml:"actual_symlink"`

	ExpectedSymlink *oval_def.EntityStateStringType `xml:"expected_symlink"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type GatekeeperTest struct {
	XMLName xml.Name `xml:gatekeeper_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type GatekeeperObject struct {
	XMLName xml.Name `xml:gatekeeper_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type GatekeeperState struct {
	XMLName xml.Name `xml:gatekeeper_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Enabled *oval_def.EntityStateBoolType `xml:"enabled"`

	Unlabeled *oval_def.EntityStateStringType `xml:"unlabeled"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type InetlisteningserversTest struct {
	XMLName xml.Name `xml:inetlisteningservers_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type InetlisteningserversObject struct {
	XMLName xml.Name `xml:inetlisteningservers_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type InetlisteningserversState struct {
	XMLName xml.Name `xml:inetlisteningservers_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	ProgramName *oval_def.EntityStateStringType `xml:"program_name"`

	LocalAddress *oval_def.EntityStateIPAddressStringType `xml:"local_address"`

	LocalFullAddress *oval_def.EntityStateStringType `xml:"local_full_address"`

	LocalPort *oval_def.EntityStateIntType `xml:"local_port"`

	ForeignAddress *oval_def.EntityStateIPAddressStringType `xml:"foreign_address"`

	ForeignFullAddress *oval_def.EntityStateStringType `xml:"foreign_full_address"`

	ForeignPort *oval_def.EntityStateStringType `xml:"foreign_port"`

	Pid *oval_def.EntityStateIntType `xml:"pid"`

	Protocol *oval_def.EntityStateStringType `xml:"protocol"`

	UserId *oval_def.EntityStateStringType `xml:"user_id"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Inetlisteningserver510Test struct {
	XMLName xml.Name `xml:inetlisteningserver510_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Inetlisteningserver510Object struct {
	XMLName xml.Name `xml:inetlisteningserver510_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Inetlisteningserver510State struct {
	XMLName xml.Name `xml:inetlisteningserver510_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Protocol *oval_def.EntityStateStringType `xml:"protocol"`

	LocalAddress *oval_def.EntityStateIPAddressStringType `xml:"local_address"`

	LocalPort *oval_def.EntityStateIntType `xml:"local_port"`

	LocalFullAddress *oval_def.EntityStateStringType `xml:"local_full_address"`

	ProgramName *oval_def.EntityStateStringType `xml:"program_name"`

	ForeignAddress *oval_def.EntityStateIPAddressStringType `xml:"foreign_address"`

	ForeignPort *oval_def.EntityStateIntType `xml:"foreign_port"`

	ForeignFullAddress *oval_def.EntityStateStringType `xml:"foreign_full_address"`

	Pid *oval_def.EntityStateIntType `xml:"pid"`

	UserId *oval_def.EntityStateIntType `xml:"user_id"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type KeychainTest struct {
	XMLName xml.Name `xml:keychain_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type KeychainObject struct {
	XMLName xml.Name `xml:keychain_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type KeychainState struct {
	XMLName xml.Name `xml:keychain_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Filepath *oval_def.EntityStateStringType `xml:"filepath"`

	LockOnSleep *oval_def.EntityStateBoolType `xml:"lock_on_sleep"`

	Timeout *oval_def.EntityStateIntType `xml:"timeout"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type LaunchdTest struct {
	XMLName xml.Name `xml:launchd_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type LaunchdObject struct {
	XMLName xml.Name `xml:launchd_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type LaunchdState struct {
	XMLName xml.Name `xml:launchd_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Label *oval_def.EntityStateStringType `xml:"label"`

	Pid *oval_def.EntityStateIntType `xml:"pid"`

	Status *oval_def.EntityStateIntType `xml:"status"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type NvramTest struct {
	XMLName xml.Name `xml:nvram_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type NvramObject struct {
	XMLName xml.Name `xml:nvram_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type NvramState struct {
	XMLName xml.Name `xml:nvram_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	NvramVar *oval_def.EntityStateStringType `xml:"nvram_var"`

	NvramValue *oval_def.EntityStateStringType `xml:"nvram_value"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type PlistTest struct {
	XMLName xml.Name `xml:plist_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type PlistObject struct {
	XMLName xml.Name `xml:plist_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type PlistState struct {
	XMLName xml.Name `xml:plist_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Key *oval_def.EntityStateStringType `xml:"key"`

	AppId *oval_def.EntityStateStringType `xml:"app_id"`

	Filepath *oval_def.EntityStateStringType `xml:"filepath"`

	Instance *oval_def.EntityStateIntType `xml:"instance"`

	Type *EntityStatePlistTypeType `xml:"type"`

	Value *oval_def.EntityStateAnySimpleType `xml:"value"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Plist510Test struct {
	XMLName xml.Name `xml:plist510_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Plist510Object struct {
	XMLName xml.Name `xml:plist510_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Plist510State struct {
	XMLName xml.Name `xml:plist510_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Key *oval_def.EntityStateStringType `xml:"key"`

	AppId *oval_def.EntityStateStringType `xml:"app_id"`

	Filepath *oval_def.EntityStateStringType `xml:"filepath"`

	Instance *oval_def.EntityStateIntType `xml:"instance"`

	Type *EntityStatePlistTypeType `xml:"type"`

	Value *oval_def.EntityStateAnySimpleType `xml:"value"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Plist511Test struct {
	XMLName xml.Name `xml:plist511_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Plist511Object struct {
	XMLName xml.Name `xml:plist511_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Plist511State struct {
	XMLName xml.Name `xml:plist511_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	AppId *oval_def.EntityStateStringType `xml:"app_id"`

	Filepath *oval_def.EntityStateStringType `xml:"filepath"`

	Xpath *oval_def.EntityStateStringType `xml:"xpath"`

	ValueOf *oval_def.EntityStateAnySimpleType `xml:"value_of"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type PwpolicyTest struct {
	XMLName xml.Name `xml:pwpolicy_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type PwpolicyObject struct {
	XMLName xml.Name `xml:pwpolicy_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type PwpolicyState struct {
	XMLName xml.Name `xml:pwpolicy_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Username *oval_def.EntityStateStringType `xml:"username"`

	Userpass *oval_def.EntityStateStringType `xml:"userpass"`

	DirectoryNode *oval_def.EntityStateStringType `xml:"directory_node"`

	MaxChars *oval_def.EntityStateIntType `xml:"maxChars"`

	MaxFailedLoginAttempts *oval_def.EntityStateIntType `xml:"maxFailedLoginAttempts"`

	MinChars *oval_def.EntityStateIntType `xml:"minChars"`

	PasswordCannotBeName *oval_def.EntityStateBoolType `xml:"passwordCannotBeName"`

	RequiresAlpha *oval_def.EntityStateBoolType `xml:"requiresAlpha"`

	RequiresNumeric *oval_def.EntityStateBoolType `xml:"requiresNumeric"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Pwpolicy59Test struct {
	XMLName xml.Name `xml:pwpolicy59_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Pwpolicy59Object struct {
	XMLName xml.Name `xml:pwpolicy59_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type Pwpolicy59State struct {
	XMLName xml.Name `xml:pwpolicy59_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	TargetUser *oval_def.EntityStateStringType `xml:"target_user"`

	Username *oval_def.EntityStateStringType `xml:"username"`

	Userpass *oval_def.EntityStateStringType `xml:"userpass"`

	DirectoryNode *oval_def.EntityStateStringType `xml:"directory_node"`

	MaxChars *oval_def.EntityStateIntType `xml:"maxChars"`

	MaxFailedLoginAttempts *oval_def.EntityStateIntType `xml:"maxFailedLoginAttempts"`

	MinChars *oval_def.EntityStateIntType `xml:"minChars"`

	PasswordCannotBeName *oval_def.EntityStateBoolType `xml:"passwordCannotBeName"`

	RequiresAlpha *oval_def.EntityStateBoolType `xml:"requiresAlpha"`

	RequiresNumeric *oval_def.EntityStateBoolType `xml:"requiresNumeric"`

	MaxMinutesUntilChangePassword *oval_def.EntityStateIntType `xml:"maxMinutesUntilChangePassword"`

	MinMinutesUntilChangePassword *oval_def.EntityStateIntType `xml:"minMinutesUntilChangePassword"`

	RequiresMixedCase *oval_def.EntityStateBoolType `xml:"requiresMixedCase"`

	RequiresSymbol *oval_def.EntityStateBoolType `xml:"requiresSymbol"`

	MinutesUntilFailedLoginReset *oval_def.EntityStateIntType `xml:"minutesUntilFailedLoginReset"`

	UsingHistory *oval_def.EntityStateIntType `xml:"usingHistory"`

	CanModifyPasswordforSelf *oval_def.EntityStateBoolType `xml:"canModifyPasswordforSelf"`

	UsingExpirationDate *oval_def.EntityStateBoolType `xml:"usingExpirationDate"`

	UsingHardExpirationDate *oval_def.EntityStateBoolType `xml:"usingHardExpirationDate"`

	ExpirationDateGMT *oval_def.EntityStateStringType `xml:"expirationDateGMT"`

	HardExpireDateGMT *oval_def.EntityStateStringType `xml:"hardExpireDateGMT"`

	MaxMinutesUntilDisabled *oval_def.EntityStateIntType `xml:"maxMinutesUntilDisabled"`

	MaxMinutesOfNonUse *oval_def.EntityStateIntType `xml:"maxMinutesOfNonUse"`

	NewPasswordRequired *oval_def.EntityStateBoolType `xml:"newPasswordRequired"`

	NotGuessablePattern *oval_def.EntityStateBoolType `xml:"notGuessablePattern"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type RlimitTest struct {
	XMLName xml.Name `xml:rlimit_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type RlimitObject struct {
	XMLName xml.Name `xml:rlimit_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type RlimitState struct {
	XMLName xml.Name `xml:rlimit_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	CpuCurrent *oval_def.EntityStateIntType `xml:"cpu_current"`

	CpuMax *oval_def.EntityStateIntType `xml:"cpu_max"`

	FilesizeCurrent *oval_def.EntityStateIntType `xml:"filesize_current"`

	FilesizeMax *oval_def.EntityStateIntType `xml:"filesize_max"`

	DataCurrent *oval_def.EntityStateIntType `xml:"data_current"`

	DataMax *oval_def.EntityStateIntType `xml:"data_max"`

	StackCurrent *oval_def.EntityStateIntType `xml:"stack_current"`

	StackMax *oval_def.EntityStateIntType `xml:"stack_max"`

	CoreCurrent *oval_def.EntityStateIntType `xml:"core_current"`

	CoreMax *oval_def.EntityStateIntType `xml:"core_max"`

	RssCurrent *oval_def.EntityStateIntType `xml:"rss_current"`

	RssMax *oval_def.EntityStateIntType `xml:"rss_max"`

	MemlockCurrent *oval_def.EntityStateIntType `xml:"memlock_current"`

	MemlockMax *oval_def.EntityStateIntType `xml:"memlock_max"`

	MaxprocCurrent *oval_def.EntityStateIntType `xml:"maxproc_current"`

	MaxprocMax *oval_def.EntityStateIntType `xml:"maxproc_max"`

	MaxfilesCurrent *oval_def.EntityStateIntType `xml:"maxfiles_current"`

	MaxfilesMax *oval_def.EntityStateIntType `xml:"maxfiles_max"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SoftwareupdateTest struct {
	XMLName xml.Name `xml:softwareupdate_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SoftwareupdateObject struct {
	XMLName xml.Name `xml:softwareupdate_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SoftwareupdateState struct {
	XMLName xml.Name `xml:softwareupdate_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Schedule *oval_def.EntityStateBoolType `xml:"schedule"`

	SoftwareTitle *oval_def.EntityStateStringType `xml:"software_title"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SystemprofilerTest struct {
	XMLName xml.Name `xml:systemprofiler_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SystemprofilerObject struct {
	XMLName xml.Name `xml:systemprofiler_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Set oval_def.Set `xml:"set"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SystemprofilerState struct {
	XMLName xml.Name `xml:systemprofiler_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	DataType *EntityStateDataTypeType `xml:"data_type"`

	Xpath *oval_def.EntityStateStringType `xml:"xpath"`

	ValueOf *oval_def.EntityStateAnySimpleType `xml:"value_of"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SystemsetupTest struct {
	XMLName xml.Name `xml:systemsetup_test`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SystemsetupObject struct {
	XMLName xml.Name `xml:systemsetup_object`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// Element
type SystemsetupState struct {
	XMLName xml.Name `xml:systemsetup_state`

	Id string `xml:"id,attr"`

	Version string `xml:"version,attr"`

	Operator string `xml:"operator,attr"`

	Comment string `xml:"comment,attr"`

	Deprecated string `xml:"deprecated,attr"`

	Timezone *oval_def.EntityStateStringType `xml:"timezone"`

	Usingnetworktime *oval_def.EntityStateBoolType `xml:"usingnetworktime"`

	Networktimeserver *oval_def.EntityStateStringType `xml:"networktimeserver"`

	Computersleep *oval_def.EntityStateIntType `xml:"computersleep"`

	Displaysleep *oval_def.EntityStateIntType `xml:"displaysleep"`

	Harddisksleep *oval_def.EntityStateIntType `xml:"harddisksleep"`

	Wakeonmodem *oval_def.EntityStateBoolType `xml:"wakeonmodem"`

	Wakeonnetworkaccess *oval_def.EntityStateBoolType `xml:"wakeonnetworkaccess"`

	Restartfreeze *oval_def.EntityStateBoolType `xml:"restartfreeze"`

	Allowpowerbuttontosleepcomputer *oval_def.EntityStateBoolType `xml:"allowpowerbuttontosleepcomputer"`

	Remotelogin *oval_def.EntityStateBoolType `xml:"remotelogin"`

	Remoteappleevents *oval_def.EntityStateBoolType `xml:"remoteappleevents"`

	Computername *oval_def.EntityStateStringType `xml:"computername"`

	Startupdisk *oval_def.EntityStateStringType `xml:"startupdisk"`

	Waitforstartupafterpowerfailure *oval_def.EntityStateIntType `xml:"waitforstartupafterpowerfailure"`

	Disablekeyboardwhenenclosurelockisengaged *oval_def.EntityStateBoolType `xml:"disablekeyboardwhenenclosurelockisengaged"`

	Kernelbootarchitecturesetting *oval_def.EntityStateStringType `xml:"kernelbootarchitecturesetting"`

	Signature *xml_dsig.Signature `xml:"Signature"`

	Notes *oval.Notes `xml:"notes"`
}

// XSD ComplexType declarations

type EntityObjectDataTypeType struct {
}

type EntityStateDataTypeType struct {
}

type EntityStatePermissionCompareType struct {
}

type EntityStatePlistTypeType struct {
}
