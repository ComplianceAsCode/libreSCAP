// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://scap.nist.gov/schema/scap/source/1.2
package ds

import (
	"encoding/xml"
	"github.com/complianceascode/librescap/pkg/scap/models/cdf"
	"github.com/complianceascode/librescap/pkg/scap/models/cpe_dict"
	"github.com/complianceascode/librescap/pkg/scap/models/er"
	"github.com/complianceascode/librescap/pkg/scap/models/inter"
	"github.com/complianceascode/librescap/pkg/scap/models/oval_def"
	"github.com/complianceascode/librescap/pkg/scap/models/xml_dsig"
)

// Element
type DataStreamCollection struct {
	XMLName xml.Name `xml:data-stream-collection`

	Id string `xml:"id,attr"`

	SchematronVersion string `xml:"schematron-version,attr"`

	DataStream []DataStream `xml:"data-stream"`

	Component []Component `xml:"component"`

	ExtendedComponent []ExtendedComponent `xml:"extended-component"`

	Signature []xml_dsig.Signature `xml:"Signature"`
}

// Element
type DataStream struct {
	XMLName xml.Name `xml:data-stream`

	Id string `xml:"id,attr"`

	UseCase string `xml:"use-case,attr"`

	ScapVersion string `xml:"scap-version,attr"`

	Timestamp string `xml:"timestamp,attr"`

	Dictionaries *RefListType `xml:"dictionaries"`

	Checklists *RefListType `xml:"checklists"`

	Checks RefListType `xml:"checks"`

	ExtendedComponents *RefListType `xml:"extended-components"`
}

// Element
type Component struct {
	XMLName xml.Name `xml:component`

	Id string `xml:"id,attr"`

	Timestamp string `xml:"timestamp,attr"`

	Benchmark cdf.Benchmark `xml:"Benchmark"`

	OvalDefinitions oval_def.OvalDefinitions `xml:"oval_definitions"`

	Ocil inter.Ocil `xml:"ocil"`

	CpeList cpe_dict.CpeList `xml:"cpe-list"`

	Tailoring cdf.Tailoring `xml:"Tailoring"`
}

// Element
type ExtendedComponent struct {
	XMLName xml.Name `xml:extended-component`

	Id string `xml:"id,attr"`

	Timestamp string `xml:"timestamp,attr"`
}

// Element
type ComponentRef struct {
	XMLName xml.Name `xml:component-ref`

	Id string `xml:"id,attr"`

	XlinkType string `xml:"type,attr"`

	XlinkHref string `xml:"href,attr"`

	Catalog *er.Catalog `xml:"catalog"`
}

// XSD ComplexType declarations

type ContentSourceType struct {
	Href string `xml:"href,attr"`
}

type RefListType struct {
	ComponentRef []ComponentRef `xml:"component-ref"`
}
