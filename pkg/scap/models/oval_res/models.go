// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://oval.mitre.org/XMLSchema/oval-results-5
package oval_res

import (
	"encoding/xml"
	"github.com/complianceascode/librescap/pkg/scap/models/oval"
	"github.com/complianceascode/librescap/pkg/scap/models/oval_def"
	"github.com/complianceascode/librescap/pkg/scap/models/oval_sc"
	"github.com/complianceascode/librescap/pkg/scap/models/xml_dsig"
)

// Element
type OvalResults struct {
	XMLName xml.Name `xml:oval_results`

	Generator oval.GeneratorType `xml:"generator"`

	Directives DefaultDirectivesType `xml:"directives"`

	ClassDirectives []ClassDirectivesType `xml:"class_directives"`

	OvalDefinitions *oval_def.OvalDefinitions `xml:"oval_definitions"`

	Results ResultsType `xml:"results"`

	Signature *xml_dsig.Signature `xml:"Signature"`
}

// XSD ComplexType declarations

type DirectivesType struct {
	DefinitionTrue DirectiveType `xml:"definition_true"`

	DefinitionFalse DirectiveType `xml:"definition_false"`

	DefinitionUnknown DirectiveType `xml:"definition_unknown"`

	DefinitionError DirectiveType `xml:"definition_error"`

	DefinitionNotEvaluated DirectiveType `xml:"definition_not_evaluated"`

	DefinitionNotApplicable DirectiveType `xml:"definition_not_applicable"`
}

type DefaultDirectivesType struct {
	IncludeSourceDefinitions string `xml:"include_source_definitions,attr"`

	DefinitionTrue DirectiveType `xml:"definition_true"`

	DefinitionFalse DirectiveType `xml:"definition_false"`

	DefinitionUnknown DirectiveType `xml:"definition_unknown"`

	DefinitionError DirectiveType `xml:"definition_error"`

	DefinitionNotEvaluated DirectiveType `xml:"definition_not_evaluated"`

	DefinitionNotApplicable DirectiveType `xml:"definition_not_applicable"`
}

type ClassDirectivesType struct {
	Class string `xml:"class,attr"`

	DefinitionTrue DirectiveType `xml:"definition_true"`

	DefinitionFalse DirectiveType `xml:"definition_false"`

	DefinitionUnknown DirectiveType `xml:"definition_unknown"`

	DefinitionError DirectiveType `xml:"definition_error"`

	DefinitionNotEvaluated DirectiveType `xml:"definition_not_evaluated"`

	DefinitionNotApplicable DirectiveType `xml:"definition_not_applicable"`
}

type DirectiveType struct {
	Reported string `xml:"reported,attr"`

	Content string `xml:"content,attr"`
}

type ResultsType struct {
	System []SystemType `xml:"system"`
}

type SystemType struct {
	Definitions *DefinitionsType `xml:"definitions"`

	Tests *TestsType `xml:"tests"`

	OvalSystemCharacteristics oval_sc.OvalSystemCharacteristics `xml:"oval_system_characteristics"`
}

type DefinitionsType struct {
	Definition []DefinitionType `xml:"definition"`
}

type DefinitionType struct {
	DefinitionId string `xml:"definition_id,attr"`

	Version string `xml:"version,attr"`

	VariableInstance string `xml:"variable_instance,attr"`

	Class string `xml:"class,attr"`

	Result string `xml:"result,attr"`

	Message []oval.MessageType `xml:"message"`

	Criteria *CriteriaType `xml:"criteria"`
}

type CriteriaType struct {
	ApplicabilityCheck string `xml:"applicability_check,attr"`

	Operator string `xml:"operator,attr"`

	Negate string `xml:"negate,attr"`

	Result string `xml:"result,attr"`

	Criteria []CriteriaType `xml:"criteria"`

	Criterion []CriterionType `xml:"criterion"`

	ExtendDefinition []ExtendDefinitionType `xml:"extend_definition"`
}

type CriterionType struct {
	ApplicabilityCheck string `xml:"applicability_check,attr"`

	TestRef string `xml:"test_ref,attr"`

	Version string `xml:"version,attr"`

	VariableInstance string `xml:"variable_instance,attr"`

	Negate string `xml:"negate,attr"`

	Result string `xml:"result,attr"`
}

type ExtendDefinitionType struct {
	ApplicabilityCheck string `xml:"applicability_check,attr"`

	DefinitionRef string `xml:"definition_ref,attr"`

	Version string `xml:"version,attr"`

	VariableInstance string `xml:"variable_instance,attr"`

	Negate string `xml:"negate,attr"`

	Result string `xml:"result,attr"`
}

type TestsType struct {
	Test []TestType `xml:"test"`
}

type TestType struct {
	TestId string `xml:"test_id,attr"`

	Version string `xml:"version,attr"`

	VariableInstance string `xml:"variable_instance,attr"`

	CheckExistence string `xml:"check_existence,attr"`

	Check string `xml:"check,attr"`

	StateOperator string `xml:"state_operator,attr"`

	Result string `xml:"result,attr"`

	Message []oval.MessageType `xml:"message"`

	TestedItem []TestedItemType `xml:"tested_item"`

	TestedVariable []TestedVariableType `xml:"tested_variable"`
}

type TestedItemType struct {
	ItemId string `xml:"item_id,attr"`

	Result string `xml:"result,attr"`

	Message []oval.MessageType `xml:"message"`
}

type TestedVariableType struct {
	VariableId string `xml:"variable_id,attr"`

	Text string `xml:",chardata"`
}
